// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
}

model Batch {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  papers   Paper[]
}

model Student {
  id           Int           @id @default(autoincrement())
  studentId    String        @unique
  universityId Int
  batchId      Int
  name         String
  university   University    @relation(fields: [universityId], references: [id])
  batch        Batch         @relation(fields: [batchId], references: [id])
  quizAttemps  QuizAttempt[]
}

model University {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
}

// bgWorkerStatus: running, failed, success
model Paper {
  id             Int           @id @default(autoincrement())
  batchId        Int
  name           String
  duration       Int
  isActive       Boolean       @default(false)
  password       String
  metadata       String
  bgWorkerStatus String        @default("")
  batch          Batch         @relation(fields: [batchId], references: [id])
  questions      Question[]
  quizAttempts   QuizAttempt[]
  createdAt      DateTime      @default(now())
}

// fileUpload: weather the question needs upload a file
model Question {
  id               Int               @id @default(autoincrement())
  paperId          Int
  type             String
  fileUpload       Boolean           @default(false)
  marks            Int
  content          String
  paper            Paper             @relation(fields: [paperId], references: [id])
  submittedAnswers SubmittedAnswer[]
}

model QuizAttempt {
  id               Int               @id @default(autoincrement())
  studentId        Int
  paperId          Int
  attemptUuid      String            @unique
  finalMarks       Int               @default(0)
  finalPercentage  Int               @default(0)
  isFinished       Boolean           @default(false)
  isProcessed      Boolean           @default(false)
  createdAt        DateTime          @default(now())
  student          Student           @relation(fields: [studentId], references: [id])
  paper            Paper             @relation(fields: [paperId], references: [id])
  submittedAnswers SubmittedAnswer[]
}

// cldPublicId: cloudinary public_id of the uploded file
model SubmittedAnswer {
  id           Int         @id @default(autoincrement())
  attemptId    Int
  questionId   Int
  choiceNumber Int         @default(-1)
  essayAnswer  String      @default("")
  cldPublicId  String      @default("")
  earnedMarks  Int         @default(0)
  isMarked     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  quizAttempt  QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     Question    @relation(fields: [questionId], references: [id])
}
